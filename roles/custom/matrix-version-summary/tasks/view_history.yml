---
- name: Read version history if it exists
  ansible.builtin.set_fact:
    version_history: >-
      {{ ansible_local[(matrix_history_fact_file | default('matrix_version_history.fact')) |
         regex_replace('\\.fact$', '')] | default({'changes': [], 'full_history': {}}) }}
  when:
    - ansible_local is defined
    - ansible_local[(matrix_history_fact_file | default('matrix_version_history.fact')) |
      regex_replace('\\.fact$', '')] is defined

- name: Initialize version history if not exists
  ansible.builtin.set_fact:
    version_history: {"last_versions": {}, "changes": [], "full_history": {}}
  when: version_history is not defined

# Apply date-based retention cleanup when reading history
- name: Get cutoff date for retention cleanup
  ansible.builtin.command: date -u -d "{{ matrix_history_retention_days | default(365) }} days ago" +"%Y-%m-%d %H:%M:%S"
  register: cutoff_date_cmd
  changed_when: false
  when: matrix_history_retention_days is defined and matrix_history_retention_days | int > 0

- name: Set cutoff date for retention
  ansible.builtin.set_fact:
    retention_cutoff_date: "{{ cutoff_date_cmd.stdout }}"
  when: cutoff_date_cmd is defined and cutoff_date_cmd.stdout is defined

- name: Apply retention policy to changes history for viewing
  ansible.builtin.set_fact:
    version_history: >-
      {{ version_history | combine({'changes': version_history.changes | default([]) |
         rejectattr('timestamp', 'lt', retention_cutoff_date) | list}) }}
  when:
    - retention_cutoff_date is defined
    - version_history.changes is defined
    - version_history.changes | length > 0

- name: Apply retention policy to full history updates for viewing
  ansible.builtin.set_fact:
    version_history: >-
      {{ version_history | combine({'full_history': version_history.full_history | default({}) |
         combine({item.key: item.value | combine({'updates': item.value.updates | default([]) |
         rejectattr('timestamp', 'lt', retention_cutoff_date) | list})}, recursive=true)}) }}
  with_dict: "{{ version_history.full_history | default({}) }}"
  when:
    - retention_cutoff_date is defined
    - version_history.full_history is defined
    - item.value.updates is defined
    - item.value.updates | length > 0

- name: Set view mode
  ansible.builtin.set_fact:
    view_mode: "{{ view_mode | default('changes') }}"
    service_filter: "{{ service_filter | default('') }}"

- name: Prepare changes history table
  ansible.builtin.set_fact:
    changes_history_table: |-
      ┌─────────────────────────────────────────────────────────────────────────────────┐
      │ MATRIX VERSION HISTORY - CHANGES                                                │
      └─────────────────────────────────────────────────────────────────────────────────┘
      {% if version_history.changes | default([]) | length == 0 %}
      ┌─────────────────────────────────────────────────────────────────────────────────┐
      │ No version changes have been recorded yet.                                      │
      │ Run the playbook with container updates to generate history.                    │
      └─────────────────────────────────────────────────────────────────────────────────┘
      {% else %}
      {% for change_record in version_history.changes %}
      {% if change_record.event_type is defined and change_record.event_type == 'initial' %}
      ┌─────────────────────────────────────────────────────────────────────────────────┐
      │ INITIAL STATE RECORDED: {{ "%-48s" | format(change_record.timestamp) }} │
      │ RECORDED BY: {{ "%-61s" | format(change_record.user | default('Unknown')) }} │
      ├───────────────────────────┬───────────────────────────┬───────────────────────────┤
      │ SERVICE                   │ INITIAL VERSION           │                           │
      ├───────────────────────────┼───────────────────────────┼───────────────────────────┤
      {% for service_name, change in change_record.changes.items() | sort %}
      {% if service_filter == '' or service_filter in service_name %}
      │ {{ "%-25s" | format(service_name | truncate(25, true)) }} │ {{ "%-25s" |
         format(change.current | string | truncate(25, true)) }} │                           │
      {% endif %}
      {% endfor %}
      └───────────────────────────┴───────────────────────────┴───────────────────────────┘
      {% else %}
      ┌─────────────────────────────────────────────────────────────────────────────────┐
      │ UPDATE RECORDED: {{ "%-53s" | format(change_record.timestamp) }} │
      │ UPDATED BY: {{ "%-60s" | format(change_record.user | default('Unknown')) }} │
      ├───────────────────────────┬───────────────────────────┬───────────────────────────┤
      │ SERVICE                   │ FROM VERSION              │ TO VERSION                │
      ├───────────────────────────┼───────────────────────────┼───────────────────────────┤
      {% for service_name, change in change_record.changes.items() | sort %}
      {% if service_filter == '' or service_filter in service_name %}
      │ {{ "%-25s" | format(service_name | truncate(25, true)) }} │ {{ "%-25s" |
         format(change.previous | default('-') | string | truncate(25, true)) }} │ {{ "%-25s" |
         format(change.current | string | truncate(25, true)) }} │
      {% endif %}
      {% endfor %}
      └───────────────────────────┴───────────────────────────┴───────────────────────────┘
      {% endif %}
      {% endfor %}
      {% endif %}
  when: view_mode == 'changes'

- name: Display changes history table
  ansible.builtin.debug:
    msg: "{{ changes_history_table }}"
  when: view_mode == 'changes'

- name: Prepare full history table
  ansible.builtin.set_fact:
    full_history_table: |-
      ┌─────────────────────────────────────────────────────────────────────────────────┐
      │ MATRIX VERSION HISTORY - FULL SERVICE HISTORY                                   │
      └─────────────────────────────────────────────────────────────────────────────────┘
      {% if version_history.full_history | default({}) | length == 0 %}
      ┌─────────────────────────────────────────────────────────────────────────────────┐
      │ No version history has been recorded yet.                                       │
      │ Run the playbook with container updates to generate history.                    │
      └─────────────────────────────────────────────────────────────────────────────────┘
      {% else %}
      {% for service_name, service_data in version_history.full_history.items() | sort %}
      {% if service_filter == '' or service_filter in service_name %}
      ┌─────────────────────────────────────────────────────────────────────────────────┐
      │ SERVICE: {{ "%-69s" | format(service_name | truncate(69, true)) }} │
      │ CURRENT VERSION: {{ "%-59s" | format(service_data.version | truncate(59, true)) }} │
      │ LAST UPDATED: {{ "%-62s" | format(service_data.last_updated | default('Unknown')) }} │
      {% if service_data.updates | default([]) | length > 0 %}
      ├─────────────────────────────┬───────────────────────┬───────────────────────────┤
      │ TIMESTAMP                   │ FROM VERSION          │ TO VERSION                │
      ├─────────────────────────────┼───────────────────────┼───────────────────────────┤
      {% for update in service_data.updates | default([]) %}
      │ {{ "%-27s" | format(update.timestamp | truncate(27, true)) }} │ {{ "%-21s" |
         format(update.previous | default('-') | string | truncate(21, true)) }} │ {{ "%-25s" |
         format(update.current | string | truncate(25, true)) }} │
      {% endfor %}
      {% else %}
      │ No version changes recorded for this service.                                   │
      {% endif %}
      └─────────────────────────────┴───────────────────────┴───────────────────────────┘

      {% endif %}
      {% endfor %}
      {% endif %}
  when: view_mode == 'full'

- name: Display full history table
  ansible.builtin.debug:
    msg: "{{ full_history_table }}"
  when: view_mode == 'full'
