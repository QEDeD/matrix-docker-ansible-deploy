---
- name: Read version history if it exists
  ansible.builtin.set_fact:
    version_history: "{{ ansible_local.matrix_version_history | default({'changes': [], 'full_history': {}}) }}"
  when:
    - ansible_local is defined
    - ansible_local.matrix_version_history is defined

- name: Initialize version history if not exists
  ansible.builtin.set_fact:
    version_history: {"last_versions": {}, "changes": [], "full_history": {}}
  when: version_history is not defined

# Apply date-based retention cleanup when reading history
- name: Get cutoff date for retention cleanup
  ansible.builtin.command: date -u -d "{{ matrix_history_retention_days | default(365) }} days ago" +"%Y-%m-%d %H:%M:%S"
  register: cutoff_date_cmd
  changed_when: false
  when: matrix_history_retention_days is defined and matrix_history_retention_days | int > 0

- name: Set cutoff date for retention
  ansible.builtin.set_fact:
    retention_cutoff_date: "{{ cutoff_date_cmd.stdout }}"
  when: cutoff_date_cmd is defined and cutoff_date_cmd.stdout is defined

- name: Apply retention policy to changes history for viewing
  ansible.builtin.set_fact:
    version_history: >-
      {{ version_history | combine({'changes': version_history.changes | default([]) |
         rejectattr('timestamp', 'lt', retention_cutoff_date) | list}) }}
  when:
    - retention_cutoff_date is defined
    - version_history.changes is defined
    - version_history.changes | length > 0

- name: Apply retention policy to full history updates for viewing
  ansible.builtin.set_fact:
    version_history: >-
      {{ version_history | combine({'full_history': version_history.full_history | default({}) |
         combine({item.key: item.value | combine({'updates': item.value.updates | default([]) |
         rejectattr('timestamp', 'lt', retention_cutoff_date) | list})}, recursive=true)}) }}
  with_dict: "{{ version_history.full_history | default({}) }}"
  when:
    - retention_cutoff_date is defined
    - version_history.full_history is defined
    - item.value.updates is defined
    - item.value.updates | length > 0

- name: Set view mode and service filter
  ansible.builtin.set_fact:
    view_mode: "{{ view_mode | default('changes') }}"
    matrix_version_service_filter: "{{ matrix_version_service_filter | default(service_filter | default('')) }}"

# Display Changes History Table
- name: Display changes history header
  ansible.builtin.shell: |
    echo "┌─────────────────────────────────────────────────────────────────────────────────┐"
    echo "│ MATRIX VERSION HISTORY - CHANGES                                                │"
    echo "└─────────────────────────────────────────────────────────────────────────────────┘"
  changed_when: false
  when: view_mode == 'changes'

- name: Display no changes message
  ansible.builtin.shell: |
    echo "┌─────────────────────────────────────────────────────────────────────────────────┐"
    echo "│ No version changes have been recorded yet.                                      │"
    echo "│ Run the playbook with container updates to generate history.                    │"
    echo "└─────────────────────────────────────────────────────────────────────────────────┘"
  changed_when: false
  when: view_mode == 'changes' and (version_history.changes | default([]) | length == 0)

- name: Display changes history records
  ansible.builtin.shell: |
    set -o pipefail
    {% for change_record in version_history.changes %}
    {% set service_filter = matrix_version_service_filter | default('') %}
    {% if change_record.event_type is defined and change_record.event_type == 'initial' %}
    echo "┌─────────────────────────────────────────────────────────────────────────────────┐"
    echo "│ INITIAL STATE RECORDED: {{ (change_record.timestamp + (' ' * 48))[:48] }} │"
    echo "│ RECORDED BY: {{ ((change_record.user | default('Unknown')) + (' ' * 61))[:61] }} │"
    echo "├───────────────────────────┬───────────────────────────┬───────────────────────────┤"
    echo "│ SERVICE                   │ INITIAL VERSION           │                           │"
    echo "├───────────────────────────┼───────────────────────────┼───────────────────────────┤"
    {% for service_name, change in change_record.changes.items() | sort %}
    {% if service_filter == '' or service_filter in service_name %}
    echo "│ {{ (service_name + (' ' * 25))[:25] }} │ {{ ((change.current | string) + (' ' * 25))[:25] }} │                           │"
    {% endif %}
    {% endfor %}
    echo "└───────────────────────────┴───────────────────────────┴───────────────────────────┘"
    {% else %}
    echo "┌─────────────────────────────────────────────────────────────────────────────────┐"
    echo "│ UPDATE RECORDED: {{ (change_record.timestamp + (' ' * 53))[:53] }} │"
    echo "│ UPDATED BY: {{ ((change_record.user | default('Unknown')) + (' ' * 60))[:60] }} │"
    echo "├───────────────────────────┬───────────────────────────┬───────────────────────────┤"
    echo "│ SERVICE                   │ FROM VERSION              │ TO VERSION                │"
    echo "├───────────────────────────┼───────────────────────────┼───────────────────────────┤"
    {% for service_name, change in change_record.changes.items() | sort %}
    {% if service_filter == '' or service_filter in service_name %}
    {% set prev_ver = ((change.previous | default('-') | string) + (' ' * 25))[:25] %}
    {% set curr_ver = ((change.current | string) + (' ' * 25))[:25] %}
    echo "│ {{ (service_name + (' ' * 25))[:25] }} │ {{ prev_ver }} │ {{ curr_ver }} │"
    {% endif %}
    {% endfor %}
    echo "└───────────────────────────┴───────────────────────────┴───────────────────────────┘"
    {% endif %}
    {% endfor %}
  args:
    executable: /bin/bash
  changed_when: false
  when: view_mode == 'changes' and (version_history.changes | default([]) | length > 0)

# Display Full History Table
- name: Display full history header
  ansible.builtin.shell: |
    echo "┌─────────────────────────────────────────────────────────────────────────────────┐"
    echo "│ MATRIX VERSION HISTORY - FULL SERVICE HISTORY                                   │"
    echo "└─────────────────────────────────────────────────────────────────────────────────┘"
  changed_when: false
  when: view_mode == 'full'

- name: Display no history message
  ansible.builtin.shell: |
    echo "┌─────────────────────────────────────────────────────────────────────────────────┐"
    echo "│ No version history has been recorded yet.                                       │"
    echo "│ Run the playbook with container updates to generate history.                    │"
    echo "└─────────────────────────────────────────────────────────────────────────────────┘"
  changed_when: false
  when: view_mode == 'full' and (version_history.full_history | default({}) | length == 0)

- name: Display full history for each service
  ansible.builtin.shell: |
    set -o pipefail
    {% set service_filter = matrix_version_service_filter | default('') %}
    {% for service_name, service_data in version_history.full_history.items() | sort %}
    {% if service_filter == '' or service_filter in service_name %}
    echo "┌─────────────────────────────────────────────────────────────────────────────────┐"
    echo "│ SERVICE: {{ (service_name + (' ' * 69))[:69] }} │"
    echo "│ CURRENT VERSION: {{ ((service_data.version | default('Unknown')) + (' ' * 59))[:59] }} │"
    echo "│ LAST UPDATED: {{ ((service_data.last_updated | default('Unknown')) + (' ' * 62))[:62] }} │"
    {% if service_data.updates | default([]) | length > 0 %}
    echo "├─────────────────────────────┬───────────────────────┬───────────────────────────┤"
    echo "│ TIMESTAMP                   │ FROM VERSION          │ TO VERSION                │"
    echo "├─────────────────────────────┼───────────────────────┼───────────────────────────┤"
    {% for update in service_data.updates | default([]) %}
    {% set prev_ver = ((update.previous | default('-') | string) + (' ' * 21))[:21] %}
    {% set curr_ver = ((update.current | string) + (' ' * 25))[:25] %}
    echo "│ {{ (update.timestamp + (' ' * 27))[:27] }} │ {{ prev_ver }} │ {{ curr_ver }} │"
    {% endfor %}
    {% else %}
    echo "│ No version changes recorded for this service.                                   │"
    {% endif %}
    echo "└─────────────────────────────┴───────────────────────┴───────────────────────────┘"
    echo ""
    {% endif %}
    {% endfor %}
  args:
    executable: /bin/bash
  changed_when: false
  when: view_mode == 'full' and (version_history.full_history | default({}) | length > 0)
