---
- name: Read version history if it exists
  ansible.builtin.set_fact:
    version_history: "{{ ansible_local.matrix_version_history | default({'changes': []}) }}"
  when: ansible_local is defined and ansible_local.matrix_version_history is defined

- name: Initialize version history if not exists
  ansible.builtin.set_fact:
    version_history: { "last_versions": {}, "changes": [] }
  when: version_history is not defined

- name: Display version history
  ansible.builtin.debug:
    msg: |
      MATRIX VERSION HISTORY
      
      {% if version_history.changes | default([]) | length == 0 %}
      No version changes have been recorded yet.
      Run the playbook with container updates to generate history.
      {% else %}
      {% for change_record in version_history.changes %}
      [{{ change_record.timestamp }}]
      {% if change_record.changes is defined and change_record.changes | length > 0 %}
      +---------------------------------+---------------------------------+---------------------------------+
      | SERVICE/CONTAINER               | FROM VERSION                    | TO VERSION                      |
      +=================================+=================================+=================================+
      {% for service_name, change in change_record.changes.items() | sort %}
      | {{ "%-31s" | format(service_name | truncate(31, true)) }} | {{ "%-31s" | format(change.previous | default('-') | string | truncate(31, true)) }} | {{ "%-31s" | format(change.current | string | truncate(31, true)) }} |
      {% endfor %}
      +---------------------------------+---------------------------------+---------------------------------+
      {% else %}
      (No changes in this update)
      {% endif %}
      
      {% endfor %}
      {% endif %}
