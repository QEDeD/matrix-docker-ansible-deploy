name: Sync all matching branches with upstream via PR

on:
  schedule:
    - cron: '0 1 * * *'
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

env:
  UPSTREAM_REPO: mother-of-all-self-hosting/mash-playbook

jobs:
  discover-branches:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      has-branches: ${{ steps.set-matrix.outputs.has-branches }}
    steps:
      - name: Discover matching branches
        id: set-matrix
        uses: actions/github-script@v7
        with:
          script: |
            const [upstreamOwner, upstreamRepo] = process.env.UPSTREAM_REPO.split('/');
            
            console.log(`üîç Discovering branches in upstream: ${upstreamOwner}/${upstreamRepo}`);
            console.log(`üîç Discovering branches in fork: ${context.repo.owner}/${context.repo.repo}`);
            
            // Get upstream branches
            let upstreamBranches = [];
            let page = 1;
            
            try {
              while (true) {
                const { data } = await github.rest.repos.listBranches({
                  owner: upstreamOwner,
                  repo: upstreamRepo,
                  per_page: 100,
                  page
                });
                
                if (data.length === 0) break;
                upstreamBranches = upstreamBranches.concat(data.map(b => b.name));
                page++;
              }
              console.log(`üì§ Found ${upstreamBranches.length} upstream branches: ${upstreamBranches.join(', ')}`);
            } catch (error) {
              console.error(`‚ùå Failed to fetch upstream branches: ${error.message}`);
              throw error;
            }
            
            // Get fork branches
            let forkBranches = [];
            page = 1;
            
            try {
              while (true) {
                const { data } = await github.rest.repos.listBranches({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  per_page: 100,
                  page
                });
                
                if (data.length === 0) break;
                forkBranches = forkBranches.concat(data.map(b => b.name));
                page++;
              }
              console.log(`üì• Found ${forkBranches.length} fork branches: ${forkBranches.join(', ')}`);
            } catch (error) {
              console.error(`‚ùå Failed to fetch fork branches: ${error.message}`);
              throw error;
            }
            
            // Find intersection
            const matchingBranches = upstreamBranches.filter(branch => 
              forkBranches.includes(branch)
            );
            
            console.log(`üéØ Found ${matchingBranches.length} matching branches: ${matchingBranches.join(', ')}`);
            
            if (matchingBranches.length === 0) {
              console.log('‚ö†Ô∏è No matching branches found between upstream and fork');
              core.setOutput('matrix', JSON.stringify({ branch: [] }));
              core.setOutput('has-branches', 'false');
            } else {
              core.setOutput('matrix', JSON.stringify({ branch: matchingBranches }));
              core.setOutput('has-branches', 'true');
            }

  sync:
    needs: discover-branches
    if: needs.discover-branches.outputs.has-branches == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.discover-branches.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout fork branch
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.branch }}
          fetch-depth: 0

      - name: Set up Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          echo "üîó Adding upstream remote..."
          git remote add upstream https://github.com/${{ env.UPSTREAM_REPO }}.git
          git remote -v

      - name: Fetch upstream branch
        run: |
          echo "‚¨áÔ∏è Fetching upstream branch: ${{ matrix.branch }}"
          git fetch upstream ${{ matrix.branch }}

      - name: Check for differences
        id: check-diff
        run: |
          echo "üîç Checking for differences between fork and upstream..."
          
          # Get the commit hashes
          FORK_COMMIT=$(git rev-parse HEAD)
          UPSTREAM_COMMIT=$(git rev-parse upstream/${{ matrix.branch }})
          
          echo "Fork commit: $FORK_COMMIT"
          echo "Upstream commit: $UPSTREAM_COMMIT"
          
          if [ "$FORK_COMMIT" = "$UPSTREAM_COMMIT" ]; then
            echo "‚úÖ Fork is already up to date with upstream"
            echo "needs-sync=false" >> $GITHUB_OUTPUT
          else
            echo "üîÑ Fork needs to be synced with upstream"
            echo "needs-sync=true" >> $GITHUB_OUTPUT
          fi

      - name: Create or update sync branch
        if: steps.check-diff.outputs.needs-sync == 'true'
        run: |
          SYNC_BRANCH="upstream-sync-${{ matrix.branch }}"
          echo "üåø Creating/updating sync branch: $SYNC_BRANCH"
          
          # Create sync branch and reset to upstream
          git checkout -B $SYNC_BRANCH
          git reset --hard upstream/${{ matrix.branch }}
          
          # Force push the sync branch
          git push -f origin $SYNC_BRANCH
          
          echo "‚úÖ Sync branch updated successfully"

      - name: Find existing PR
        if: steps.check-diff.outputs.needs-sync == 'true'
        id: find-pr
        uses: actions/github-script@v7
        with:
          script: |
            const syncBranch = `upstream-sync-${{ matrix.branch }}`;
            
            console.log(`üîç Looking for existing PR from ${syncBranch} to ${{ matrix.branch }}`);
            
            try {
              const { data: pulls } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                head: `${context.repo.owner}:${syncBranch}`,
                base: '${{ matrix.branch }}',
                state: 'open'
              });
              
              if (pulls.length > 0) {
                console.log(`‚úÖ Found existing PR #${pulls[0].number}`);
                core.setOutput('pr-number', pulls[0].number.toString());
                core.setOutput('pr-exists', 'true');
              } else {
                console.log('‚ÑπÔ∏è No existing PR found');
                core.setOutput('pr-exists', 'false');
              }
            } catch (error) {
              console.error(`‚ùå Error searching for existing PR: ${error.message}`);
              core.setOutput('pr-exists', 'false');
            }

      - name: Create or update PR
        if: steps.check-diff.outputs.needs-sync == 'true'
        id: create-pr
        uses: actions/github-script@v7
        with:
          script: |
            const syncBranch = `upstream-sync-${{ matrix.branch }}`;
            const baseBranch = '${{ matrix.branch }}';
            const prExists = '${{ steps.find-pr.outputs.pr-exists }}' === 'true';
            let prNumber = '${{ steps.find-pr.outputs.pr-number }}';
            
            if (!prExists) {
              console.log(`üìù Creating new PR from ${syncBranch} to ${baseBranch}`);
              
              try {
                const { data: pr } = await github.rest.pulls.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `Sync ${baseBranch} with upstream`,
                  head: syncBranch,
                  base: baseBranch,
                  body: `ü§ñ **Automated Upstream Sync**
            
            This PR automatically syncs the \`${baseBranch}\` branch with upstream changes from [\`${process.env.UPSTREAM_REPO}\`](https://github.com/${process.env.UPSTREAM_REPO}).
            
            **What's included:**
            - Latest changes from \`${process.env.UPSTREAM_REPO}@${baseBranch}\`
            - Automatically created sync branch: \`${syncBranch}\`
            
            **Auto-merge:** This PR will auto-merge if there are no conflicts.
            
            ---
            Generated on: ${new Date().toISOString()}
            Workflow: \`${context.workflow}\`
            Run: [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
                });
                
                prNumber = pr.number.toString();
                console.log(`‚úÖ Created PR #${prNumber}`);
              } catch (error) {
                console.error(`‚ùå Failed to create PR: ${error.message}`);
                throw error;
              }
            } else {
              console.log(`‚úÖ Updated existing PR #${prNumber}`);
            }
            
            core.setOutput('pr-number', prNumber);

      - name: Enable auto-merge
        if: steps.check-diff.outputs.needs-sync == 'true' && steps.create-pr.outputs.pr-number != ''
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = Number('${{ steps.create-pr.outputs.pr-number }}');
            
            try {
              console.log(`üîÑ Enabling auto-merge for PR #${prNumber}`);
              
              // Get PR details to get the node ID
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });
              
              // Check if the PR is mergeable
              if (pr.mergeable === false) {
                console.log(`‚ö†Ô∏è PR #${prNumber} has conflicts and cannot be auto-merged`);
                return;
              }
              
              // Enable auto-merge using GraphQL
              await github.graphql(`
                mutation($pullRequestId: ID!) {
                  enablePullRequestAutoMerge(input: {
                    pullRequestId: $pullRequestId,
                    mergeMethod: MERGE
                  }) {
                    pullRequest {
                      autoMergeRequest {
                        enabledAt
                        enabledBy {
                          login
                        }
                      }
                    }
                  }
                }
              `, {
                pullRequestId: pr.node_id
              });
              
              console.log(`‚úÖ Auto-merge enabled for PR #${prNumber}`);
              
            } catch (error) {
              console.error(`‚ö†Ô∏è Failed to enable auto-merge for PR #${prNumber}: ${error.message}`);
              // Don't fail the workflow if auto-merge fails
            }

  summary:
    needs: [discover-branches, sync]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Workflow Summary
        run: |
          echo "## üîÑ Upstream Sync Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.discover-branches.outputs.has-branches }}" = "true" ]; then
            echo "‚úÖ **Branch Discovery:** Found matching branches" >> $GITHUB_STEP_SUMMARY
            echo "üéØ **Sync Jobs:** ${{ strategy.job-total }} branches processed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Branch Discovery:** No matching branches found between fork and upstream" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Upstream Repository:** \`${{ env.UPSTREAM_REPO }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow Run:** [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
